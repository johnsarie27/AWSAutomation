<?xml version="1.0" encoding="UTF-8"?>
<!--
Custom type extensions generated by jjohns
06/09/2020 09:53:02
-->
<Types>
	<Type>
		<Name>Amazon.ElasticLoadBalancing.Model.LoadBalancerDescription</Name>
		<Members>
			<ScriptProperty>
				<Name>IpAddress</Name>
				<GetScriptBlock> (Resolve-DnsName $this.DNSName).IPAddress </GetScriptBlock>
			</ScriptProperty>
			<ScriptProperty>
				<Name>Type</Name>
				<GetScriptBlock> 'classic' </GetScriptBlock>
			</ScriptProperty>
			<AliasProperty>
				<Name>Name</Name>
				<ReferencedMemberName>LoadBalancerName</ReferencedMemberName>
			</AliasProperty>
			<ScriptMethod>
				<Name>GetPrivateIpWithCredential</Name>
				<Script>Param(
						[Parameter(HelpMessage = 'AWS Credential Object')]
						[ValidateNotNullOrEmpty()]
						[Amazon.Runtime.AWSCredentials] $Credential,

						[Parameter(Mandatory, HelpMessage = 'AWS Region')]
						[ValidateScript( { (Get-AWSRegion).Region -contains $_ })]
						[string] $Region
				)

				$networkInterface = Get-EC2NetworkInterface -Credential $Credential -Region $Region

				# LOOP ALL NETWORK INTERFACES
				foreach ( $n in $networkInterface ) {
						if ( $n.Description -match ('^ELB\s{0}' -f $this.LoadBalancerName) ) { $n.PrivateIpAddress }
						#$this.PrivateIp += $n.PrivateIpAddress
				}</Script>
			</ScriptMethod>
			<ScriptMethod>
				<Name>GetPrivateIpWithProfile</Name>
				<Script>Param(
						[Parameter(ValueFromPipeline, HelpMessage = 'AWS Credential Profile name')]
						[ValidateScript({ (Get-AWSCredential -ListProfileDetail).ProfileName -contains $_ })]
						[ValidateNotNullOrEmpty()]
						[string] $ProfileName,

						[Parameter(Mandatory, HelpMessage = 'AWS Region')]
						[ValidateScript( { (Get-AWSRegion).Region -contains $_ })]
						[string] $Region
				)

				$networkInterface = Get-EC2NetworkInterface -ProfileName $ProfileName -Region $Region

				# LOOP ALL NETWORK INTERFACES
				foreach ( $n in $networkInterface ) {
						if ( $n.Description -match ('^ELB\s{0}' -f $this.LoadBalancerName) ) { $n.PrivateIpAddress }
						#$this.PrivateIp += $n.PrivateIpAddress
				}</Script>
			</ScriptMethod>
			<PropertySet>
				<Name>Info</Name>
				<ReferencedProperties>
					<Name>Name</Name>
					<Name>DNSName</Name>
					<Name>IpAddress</Name>
					<Name>Scheme</Name>
				</ReferencedProperties>
			</PropertySet>
		</Members>
	</Type>
</Types>